#+OPTIONS: author:nil timestamp:nil

Welcome to Rincanter!

* About

  Main difference from original [[https://github.com/jolby/rincanter/][rincanter]] is that this version
  does not require playing with native libraries as it uses a socket connection to the R interpreter.
  As the original version, it also offers translation between
  [[http://clojure.org/][Clojure]] and [[http://data-sorcery.org/][Incanter]] datatypes and R datatypes such as R dataframe to
  [[http://data-sorcery.org/][Incanter]] dataset.

* Installation

** Install R for your platform

   The directions for installing R are outside the scope of this
   document, but R is well supported on most platforms, and has great
   documentation: [[http://cran.r-project.org/][R Project Page]]

** Install and launch Rserve
    From R execute following lines:
    #+BEGIN_EXAMPLE R
    install.packages("Rserve")
    library(Rserve)
    Rserve()
    #+END_EXAMPLE
 
* Example Usage
  The main entry points are the functions:
  - [[https://github.com/svarcheg/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/r-eval][r-eval]]
  - [[https://github.com/svarcheg/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/with-r-eval][with-r-eval]]
  - [[https://github.com/svarcheg/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/r-set!][r-set!]]
  - [[https://github.com/svarcheg/rincanter/com.evocomputing.rincanter-api.html#com.evocomputing.rincanter/r-get][r-get]]

** r-eval
You can play around with Clojure/Incanter and R in the same REPL session:
#+BEGIN_EXAMPLE clojure
   (use '(com.evocomputing rincanter))

   (r-eval "data(iris)")

   ;;eval's the iris dataframe object, converts into
   ;;incanter dataset
   (r-eval "iris")
 
   ;;create vector on R side
   (r-eval "vec_in_r = c(1,2,3)")
   
   ;;now retrieve it, converting to Clojure vector
   (r-get "vec_in_r")
#+END_EXAMPLE

plotting:
#+BEGIN_EXAMPLE
   (use '(com.evocomputing rincanter))

   (r-eval "data(iris)")
   
   ;;initialize the R graphics device for your system:
   ;;For Mac OS X
   (r-eval "quartz()")
   ;;windows: 
   (r-eval "windows()")
   ;;unix/linux
   (r-eval "x11()")

   ;;create the plot using values from the iris dataset
   (r-eval "plot(Sepal.Length ~ Sepal.Width, data = iris)")
   ;;alter this existing plot
   (r-eval "title(main = \"Iris Sepal Measurements\")")
#+END_EXAMPLE
 
** with-r-eval
Using with-r-eval, it is even easier. Within this form, all forms
enclosed in parenthesis are evaluated as normal Clojure forms, strings
are evaluated in R using r-eval:


#+BEGIN_EXAMPLE clojure
   (use '(com.evocomputing rincanter))

   (with-r-eval 
     "data(iris)"

     ;;eval's the iris dataframe object, converts into
     ;;incanter dataset
     "iris"
 
     ;;create vector on R side
     "vec_in_r = c(1,2,3)"
   
     ;;now retrieve it, converting to Clojure vector
     (r-get "vec_in_r"))
#+END_EXAMPLE


* Documentation
** API Documentation

   API Documentation for rincanter is located at:
   [[https://github.com/svarcheg/rincanter][Rincanter API]]
